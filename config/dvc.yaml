# DVC pipeline configuration file defining the data processing, hyperparameter tuning, and model training stages.
stages:
  # Stage 1: Preprocess the raw dataset to prepare it for model training.
  preprocess:
    # Command to execute the preprocessing script.
    cmd: python src/preprocessing/preprocess.py
    # Dependencies required for this stage (input files and scripts).
    deps:
      - data/raw/weather.csv  # Raw dataset input file.
      - src/preprocessing/preprocess.py  # Script containing preprocessing logic.
      - src/utils/utils_and_constants.py  # Utility functions and constants used in preprocessing.
    # Output file generated by this stage.
    outs:
      - data/processed/weather.csv  # Processed dataset saved for downstream use.

  # Stage 2: Perform hyperparameter tuning for the random forest model.
  hp_tune:
    # Command to run the hyperparameter tuning script.
    cmd: python scripts/hp_tuning.py
    # Dependencies required for hyperparameter tuning.
    deps:
      - config/hp_config.json  # Configuration file with hyperparameter search space.
      - data/processed/weather.csv  # Processed dataset used for tuning.
      - scripts/hp_tuning.py  # Script implementing hyperparameter tuning logic.
      - src/utils/utils_and_constants.py  # Utility functions and constants.
    # Outputs generated by this stage.
    outs:
      - reports/hp_tuning_results.md:  # Markdown file with tuning results (not cached to allow updates).
          cache: false
      - reports/rfc_best_params.json  # JSON file containing the best hyperparameters found.

  # Stage 3: Train machine learning models using the processed data and best hyperparameters.
  train:
    # Command to execute the training script.
    cmd: python src/training/train.py
    # Dependencies required for training.
    deps:
      - data/processed/weather.csv  # Processed dataset for training models.
      - reports/rfc_best_params.json  # Best hyperparameters for the random forest model.
      - scripts/metrics_and_plots.py  # Script for generating metrics and plots.
      - src/models/model.py  # Model definitions and training logic.
      - src/training/train.py  # Script to orchestrate model training.
      - src/utils/utils_and_constants.py  # Utility functions and constants.
    # Outputs generated by this stage.
    outs:
      - models/trained_model_logistic.pkl  # Trained logistic regression model.
      - models/trained_model_neural_network.pkl  # Trained neural network model.
      - models/trained_model_random_forest.pkl  # Trained random forest model.
    # Metrics output for model evaluation.
    metrics:
      - reports/metrics.json:  # JSON file containing evaluation metrics (not cached for updates).
          cache: false
    # Plots generated to visualize model performance.
    plots:
      - reports/confusion_matrix.png:  # Confusion matrix plot (not cached to allow updates).
          cache: false
      - reports/predictions.csv:  # Data for confusion matrix plot.
          template: confusion  # DVC template for confusion matrix visualization.
          x: predicted_label  # X-axis: predicted labels.
          y: true_label  # Y-axis: true labels.
          x_label: 'Predicted label'  # X-axis label.
          y_label: 'True label'  # Y-axis label.
          title: Confusion matrix  # Plot title.
          cache: false  # Not cached to allow updates.
      - reports/roc_curve.csv:  # Data for ROC curve plot.
          template: simple  # DVC template for simple line plot.
          x: fpr  # X-axis: false positive rate.
          y: tpr  # Y-axis: true positive rate.
          x_label: 'False Positive Rate'  # X-axis label.
          y_label: 'True Positive Rate'  # Y-axis label.
          title: ROC curve  # Plot title.
          cache: false  # Not cached to allow updates.