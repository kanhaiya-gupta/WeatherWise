# Name of the GitHub Actions workflow
name: WeatherWise CI/CD

# Events that trigger the workflow
on:
  # Trigger on push to the main branch
  push:
    branches:
      - main
  # Trigger on pull requests targeting the main branch
  pull_request:
    branches:
      - main
  # Allow manual triggering with an optional reason input
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manually triggering the workflow'
        required: false
        default: 'Manual run requested'

# Define jobs to be executed
jobs:
  # Job 1: Lint the codebase to ensure code quality
  lint:
    runs-on: ubuntu-latest  # Run on the latest Ubuntu runner
    steps:
      # Check out the repository code
      - uses: actions/checkout@v4
        name: Checkout code
      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'  # Match projectâ€™s Python version
      # Install linting dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8  # Install flake8 for linting
      # Run linting on source, scripts, and test directories
      - name: Run linting
        run: flake8 src scripts tests

  # Job 2: Run unit tests to verify functionality
  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - uses: actions/checkout@v4
        name: Checkout code
      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      # Install testing dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest  # Install project dependencies and pytest
      # Run tests located in the tests/ directory
      - name: Run tests
        run: pytest tests/

  # Job 3: Execute the DVC pipeline to preprocess data, tune hyperparameters, and train models
  train:
    runs-on: ubuntu-latest
    needs: [lint, test]  # Only run after lint and test jobs succeed
    steps:
      # Check out the repository code
      - uses: actions/checkout@v4
        name: Checkout code
      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      # Install project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # Install DVC for pipeline execution
      - name: Install DVC
        run: pip install dvc
      # Run the DVC pipeline to execute preprocessing, hyperparameter tuning, and training
      - name: Run DVC pipeline
        run: |
          dvc repro  # Reproduces the pipeline defined in dvc.yaml
      # Upload trained models as artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: models  # Artifact name
          path: |
            models/trained_model_logistic.pkl
            models/trained_model_neural_network.pkl
            models/trained_model_random_forest.pkl  # Upload all trained models

  # Job 4: Deploy the application by building and pushing a Docker image
  deploy:
    runs-on: ubuntu-latest
    needs: [train]  # Only run after the train job succeeds
    # Only execute on push to main branch, not on pull requests or manual triggers
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # Check out the repository code
      - uses: actions/checkout@v4
        name: Checkout code
      # Download the trained models from the train job
      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: models
          path: models/  # Save models to the models/ directory
      # Set up Docker Buildx for building multi-platform images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Log in to DockerHub using stored secrets
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # DockerHub username from GitHub secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # DockerHub password from GitHub secrets
      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .  # Build context is the project root
          push: true  # Push the image to DockerHub
          tags: ${{ secrets.DOCKER_USERNAME }}/weatherwise:latest  # Tag image with username and 'latest'