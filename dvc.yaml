# DVC pipeline configuration for the WeatherWise project
stages:
  # Stage 1: Preprocess the raw dataset to prepare it for model training
  preprocess:
    # Command to run preprocessing with PYTHONPATH set for Windows compatibility
    cmd: set PYTHONPATH=.&& python src/preprocessing/preprocess.py
    # Dependencies required for preprocessing
    deps:
      - data/raw/weather.csv  # Input raw dataset
      - src/preprocessing/preprocess.py  # Preprocessing script
      - src/utils/utils_and_constants.py  # Utility functions and constants
    # Output generated by preprocessing
    outs:
      - data/processed/weather.csv  # Processed dataset for downstream use

  # Stage 2: Perform hyperparameter tuning for the random forest model
  hp_tune:
    # Command to run hyperparameter tuning with PYTHONPATH set
    cmd: set PYTHONPATH=.&& python scripts/hp_tuning.py
    # Dependencies required for tuning
    deps:
      - config/hp_config.json  # Hyperparameter search space configuration
      - data/processed/weather.csv  # Processed dataset
      - scripts/hp_tuning.py  # Tuning script
      - src/utils/utils_and_constants.py  # Utility functions
    # Outputs from tuning
    outs:
      - reports/hp_tuning_results.md:  # Tuning results in markdown (not cached)
          cache: false
      - reports/rfc_best_params.json  # Best hyperparameters

  # Stage 3: Train models using processed data and best hyperparameters
  train:
    # Command to run training with PYTHONPATH set
    cmd: set PYTHONPATH=.&& python src/training/train.py
    # Dependencies required for training
    deps:
      - data/processed/weather.csv  # Processed dataset
      - reports/rfc_best_params.json  # Best hyperparameters from tuning
      - scripts/metrics_and_plots.py  # Metrics and plotting utilities
      - src/models/model.py  # Model definitions
      - src/training/train.py  # Training script
      - src/utils/utils_and_constants.py  # Utility functions
    # Outputs from training
    outs:
      #- models/trained_model_logistic.pkl  # Trained logistic regression model
      #- models/trained_model_neural_network.pkl  # Trained neural network model
      - models/trained_model_random_forest.pkl  # Trained random forest model
    # Metrics output for evaluation
    metrics:
      - reports/metrics.json:  # Evaluation metrics (not cached)
          cache: false
    # Plots for visualizing model performance
    plots:
      - reports/confusion_matrix.png:  # Confusion matrix plot (not cached)
          cache: false
      - reports/predictions.csv:  # Data for confusion matrix
          template: confusion
          x: predicted_label
          y: true_label
          x_label: 'Predicted label'
          y_label: 'True label'
          title: Confusion matrix
          cache: false
      - reports/roc_curve.csv:  # Data for ROC curve
          template: simple
          x: fpr
          y: tpr
          x_label: 'False Positive Rate'
          y_label: 'True Positive Rate'
          title: ROC curve
          cache: false